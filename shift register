VHDL


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity shift_register is
    Port ( clk,rst : in  STD_LOGIC;
           m : in  STD_LOGIC_VECTOR (1 downto 0);
           s : in  STD_LOGIC_VECTOR (3 downto 0);
           y : out  STD_LOGIC_VECTOR (3 downto 0));
end shift_register;

architecture Behavioral of shift_register is
signal t : STD_LOGIC_VECTOR( 3 downto 0);
begin
process (clk , rst)
begin
if rst ='1' then
y <="0000";
elsif clk'event and clk = '1' then
case m is 
when "00" =>              --siso
t(3) <= s(0);
t(2) <= t(3);
t(1) <= t(2);
t(0) <= t(1);
y(0) <= t(0);

when "01" =>                       --sipo
t(3) <= s(0);
t(2) <= t(3);
t(1) <= t(2);
t(0) <= t(1);
y <= t; 

when "11" =>            --pipo
t <= s;
y <= t;

 
when "10" =>         --piso
t <= s;
t(2) <= t(3);
t(1) <= t(2);
t(0) <= t(1);
y(3) <= t(0);
when others => null;
end case;
end if;
end process;

end Behavioral;









TEST BENCH




LIBRARY ieee;
USE ieee.std_logic_1164.ALL;

 
ENTITY shift_register_tb IS
END shift_register_tb;
 
ARCHITECTURE behavior OF shift_register_tb IS 
 
    -- Component Declaration for the Unit Under Test (UUT)
 
    COMPONENT shift_register
    PORT(
         clk : IN  std_logic;
         rst : IN  std_logic;
         m : IN  std_logic_vector(1 downto 0);
         s : IN  std_logic_vector(3 downto 0);
         y : OUT  std_logic_vector(3 downto 0)
        );
    END COMPONENT;
    

   --Inputs
   signal clk : std_logic := '0';
   signal rst : std_logic := '0';
   signal m : std_logic_vector(1 downto 0) := (others => '0');
   signal s : std_logic_vector(3 downto 0) := (others => '0');

 	--Outputs
   signal y : std_logic_vector(3 downto 0);


 
BEGIN
 
	-- Instantiate the Unit Under Test (UUT)
   uut: shift_register PORT MAP (
          clk => clk,
          rst => rst,
          m => m,
          s => s,
          y => y
        );

   -- Clock process definitions
   clk_process :process
   begin
		clk <= '0';
		wait for 3ns;
		clk <= '1';
		wait for 3ns;
   end process;
 

   -- Stimulus process
   stim_proc: process
   begin		
	rst <= '1';
	wait for 5 ns;
	rst <= '0';
	wait for 5 ns;
	
	m <= "00";
	s <="1-0U";
	wait for 50 ns;
	
	m <= "01";
	s <="1UXX";
	wait for 50 ns;
	
	
	m <= "10";
	s <="1UU0";
	wait for 50 ns;
	
	m <= "11";
	s <="1111";
	wait for 50 ns;
	
	
     
   end process;

END;
